{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Guided Project on Chinook database\n",
    "\n",
    "This is my execution of the DataQuest Guided Project. This project is guided insofar as the DataQuest platform provides a set of prompts to be answered using SQL to analyze the Chinook database.\n",
    "\n",
    "The Chinook SQLite database file represents a digital media store with information on track sales, customer ids, etc. This is a sample database which uses partially real iTunes data, but was created for SQL practice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Connect Chinook database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Connected: None@chinook.db'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%capture\n",
    "%load_ext sql\n",
    "%sql sqlite:///chinook.db"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Explore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "        <th>type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>album</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>artist</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>customer</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>employee</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>genre</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>invoice</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>invoice_line</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>media_type</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>playlist</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>playlist_track</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>track</td>\n",
       "        <td>table</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('album', 'table'),\n",
       " ('artist', 'table'),\n",
       " ('customer', 'table'),\n",
       " ('employee', 'table'),\n",
       " ('genre', 'table'),\n",
       " ('invoice', 'table'),\n",
       " ('invoice_line', 'table'),\n",
       " ('media_type', 'table'),\n",
       " ('playlist', 'table'),\n",
       " ('playlist_track', 'table'),\n",
       " ('track', 'table')]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT\n",
    "    name,\n",
    "    type\n",
    "FROM sqlite_master\n",
    "WHERE type IN (\"table\",\"view\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which genres sell the most tracks in the U.S.?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>genre</th>\n",
       "        <th>sold_by_genre</th>\n",
       "        <th>percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Rock</td>\n",
       "        <td>561</td>\n",
       "        <td>0.534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Alternative &amp; Punk</td>\n",
       "        <td>130</td>\n",
       "        <td>0.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Metal</td>\n",
       "        <td>124</td>\n",
       "        <td>0.118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>R&amp;B/Soul</td>\n",
       "        <td>53</td>\n",
       "        <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Blues</td>\n",
       "        <td>36</td>\n",
       "        <td>0.034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Alternative</td>\n",
       "        <td>35</td>\n",
       "        <td>0.033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Latin</td>\n",
       "        <td>22</td>\n",
       "        <td>0.021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Pop</td>\n",
       "        <td>22</td>\n",
       "        <td>0.021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Hip Hop/Rap</td>\n",
       "        <td>20</td>\n",
       "        <td>0.019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Jazz</td>\n",
       "        <td>14</td>\n",
       "        <td>0.013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Easy Listening</td>\n",
       "        <td>13</td>\n",
       "        <td>0.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Reggae</td>\n",
       "        <td>6</td>\n",
       "        <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Electronica/Dance</td>\n",
       "        <td>5</td>\n",
       "        <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Classical</td>\n",
       "        <td>4</td>\n",
       "        <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Heavy Metal</td>\n",
       "        <td>3</td>\n",
       "        <td>0.003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Soundtrack</td>\n",
       "        <td>2</td>\n",
       "        <td>0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>TV Shows</td>\n",
       "        <td>1</td>\n",
       "        <td>0.001</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Rock', 561, 0.534),\n",
       " ('Alternative & Punk', 130, 0.124),\n",
       " ('Metal', 124, 0.118),\n",
       " ('R&B/Soul', 53, 0.05),\n",
       " ('Blues', 36, 0.034),\n",
       " ('Alternative', 35, 0.033),\n",
       " ('Latin', 22, 0.021),\n",
       " ('Pop', 22, 0.021),\n",
       " ('Hip Hop/Rap', 20, 0.019),\n",
       " ('Jazz', 14, 0.013),\n",
       " ('Easy Listening', 13, 0.012),\n",
       " ('Reggae', 6, 0.006),\n",
       " ('Electronica/Dance', 5, 0.005),\n",
       " ('Classical', 4, 0.004),\n",
       " ('Heavy Metal', 3, 0.003),\n",
       " ('Soundtrack', 2, 0.002),\n",
       " ('TV Shows', 1, 0.001)]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH tracks_sold_usa AS\n",
    "                       (\n",
    "                        SELECT il.* \n",
    "                        FROM invoice_line il\n",
    "                        INNER JOIN invoice i ON il.invoice_id = i.invoice_id\n",
    "                        INNER JOIN customer c ON i.customer_id = c.customer_id\n",
    "                        WHERE c.country = \"USA\"\n",
    "                       )\n",
    "    \n",
    "SELECT g.name genre, \n",
    "       COUNT(tsu.invoice_line_id) sold_by_genre,\n",
    "       ROUND(CAST(COUNT(tsu.invoice_line_id) AS FLOAT) / \n",
    "        (\n",
    "        SELECT COUNT(*) from tracks_sold_usa\n",
    "        ), 3) percentage\n",
    "FROM tracks_sold_usa tsu\n",
    "INNER JOIN track t ON t.track_id = tsu.track_id\n",
    "INNER JOIN genre g ON g.genre_id = t.genre_id\n",
    "GROUP BY 1 \n",
    "ORDER BY 2 DESC;            \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### For each country, calculate:\n",
    "* total number of customers\n",
    "* total value of sales\n",
    "* average value of sales per customer\n",
    "* average order value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>country</th>\n",
       "        <th>n_customers</th>\n",
       "        <th>total_sales</th>\n",
       "        <th>avg_sales_per_customer</th>\n",
       "        <th>avg_order_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>USA</td>\n",
       "        <td>13</td>\n",
       "        <td>1040.49</td>\n",
       "        <td>80.038</td>\n",
       "        <td>7.943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Canada</td>\n",
       "        <td>8</td>\n",
       "        <td>535.59</td>\n",
       "        <td>66.949</td>\n",
       "        <td>7.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Brazil</td>\n",
       "        <td>5</td>\n",
       "        <td>427.68</td>\n",
       "        <td>85.536</td>\n",
       "        <td>7.011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>France</td>\n",
       "        <td>5</td>\n",
       "        <td>389.07</td>\n",
       "        <td>77.814</td>\n",
       "        <td>7.781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Germany</td>\n",
       "        <td>4</td>\n",
       "        <td>334.62</td>\n",
       "        <td>83.655</td>\n",
       "        <td>8.161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Czech Republic</td>\n",
       "        <td>2</td>\n",
       "        <td>273.24</td>\n",
       "        <td>136.62</td>\n",
       "        <td>9.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>United Kingdom</td>\n",
       "        <td>3</td>\n",
       "        <td>245.52</td>\n",
       "        <td>81.84</td>\n",
       "        <td>8.769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Portugal</td>\n",
       "        <td>2</td>\n",
       "        <td>185.13</td>\n",
       "        <td>92.565</td>\n",
       "        <td>6.384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>India</td>\n",
       "        <td>2</td>\n",
       "        <td>183.15</td>\n",
       "        <td>91.575</td>\n",
       "        <td>8.721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Other</td>\n",
       "        <td>15</td>\n",
       "        <td>1094.94</td>\n",
       "        <td>72.996</td>\n",
       "        <td>7.449</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('USA', 13, 1040.49, 80.038, 7.943),\n",
       " ('Canada', 8, 535.59, 66.949, 7.047),\n",
       " ('Brazil', 5, 427.68, 85.536, 7.011),\n",
       " ('France', 5, 389.07, 77.814, 7.781),\n",
       " ('Germany', 4, 334.62, 83.655, 8.161),\n",
       " ('Czech Republic', 2, 273.24, 136.62, 9.108),\n",
       " ('United Kingdom', 3, 245.52, 81.84, 8.769),\n",
       " ('Portugal', 2, 185.13, 92.565, 6.384),\n",
       " ('India', 2, 183.15, 91.575, 8.721),\n",
       " ('Other', 15, 1094.94, 72.996, 7.449)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH joined_table AS \n",
    "                   (\n",
    "                    SELECT \n",
    "                      CASE WHEN (\n",
    "                            SELECT COUNT(*)\n",
    "                            FROM customer\n",
    "                            WHERE country = c.country\n",
    "                            ) = 1 THEN \"Other\"\n",
    "                           ELSE c.country\n",
    "                           END \n",
    "                           AS country, \n",
    "                       c.customer_id, \n",
    "                       i.invoice_id, \n",
    "                       i.total\n",
    "                    FROM customer c\n",
    "                    INNER JOIN invoice i ON i.customer_id = c.customer_id\n",
    "                   )\n",
    "\n",
    "SELECT country, \n",
    "       COUNT(DISTINCT customer_id) n_customers, \n",
    "       ROUND(SUM(total),3) total_sales,\n",
    "       ROUND(SUM(total) / COUNT(DISTINCT customer_id), 3) avg_sales_per_customer,\n",
    "       ROUND(SUM(total) / (\n",
    "                      SELECT COUNT(j.invoice_id)\n",
    "                      FROM joined_table\n",
    "                      GROUP BY country\n",
    "                      ),3) avg_order_value\n",
    "FROM joined_table j\n",
    "GROUP BY 1 ORDER BY country = \"Other\" ASC, 3 DESC;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What percentage of purchases are albums v. individual tracks?\n",
    "The digital media store allows to purchase either a full album or on or more individual tracks, but not a mix of both. \n",
    "\n",
    "_There is an edge case which prevents a completely accurate analysis: customers can manually select all individual tracks from one album and then add more individual tracks. If this occurs, the purchase will be a mix of full albums and individual tracks, but in the analysis below it will be included in the percentage of individual tracks._"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(sqlite3.OperationalError) near \"FROM\": syntax error\n",
      "[SQL: WITH a_track_per_invoice AS \n",
      "                (\n",
      "                SELECT invoice_id, MAX(track_id) track_id\n",
      "                FROM invoice_line il\n",
      "                GROUP BY invoice_id\n",
      "                ),\n",
      "    \n",
      "album_vs_individual AS\n",
      "    (\n",
      "    SELECT  a_track_per_invoice.*,\n",
      "        CASE \n",
      "           WHEN (\n",
      "                 SELECT il2.track_id FROM invoice_line il2\n",
      "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
      "    \n",
      "                 EXCEPT\n",
      "        \n",
      "                 SELECT t.track_id FROM track t\n",
      "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
      "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
      "                )\n",
      "        IS NULL\n",
      "        \n",
      "        AND (\n",
      "            SELECT t.track_id FROM track t\n",
      "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
      "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
      "            EXCEPT\n",
      "            \n",
      "            SELECT il2.track_id FROM invoice_line il2\n",
      "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
      "            )\n",
      "        \n",
      "        THEN \"yes\"\n",
      "        ELSE \"no\"\n",
      "        END AS album_purchase\n",
      "FROM a_track_per_invoice\n",
      "    )\n",
      "\n",
      "        \n",
      "SELECT album_purchase, \n",
      "       COUNT(invoice_id) n_invoices, \n",
      "       ROUND(CAST(COUNT(invoice_id) AS FLOAT) / (SELECT COUNT * FROM invoice), 3) percent_invoices\n",
      "FROM album_vs_individual\n",
      "GROUP BY album_purchase]\n",
      "(Background on this error at: http://sqlalche.me/e/e3q8)\n"
     ]
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH a_track_per_invoice AS \n",
    "                (\n",
    "                SELECT invoice_id, MAX(track_id) track_id\n",
    "                FROM invoice_line il\n",
    "                GROUP BY invoice_id\n",
    "                ),\n",
    "    \n",
    "album_vs_individual AS\n",
    "    (\n",
    "    SELECT  a_track_per_invoice.*,\n",
    "        CASE \n",
    "           WHEN (\n",
    "                 SELECT il2.track_id FROM invoice_line il2\n",
    "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
    "    \n",
    "                 EXCEPT\n",
    "        \n",
    "                 SELECT t.track_id FROM track t\n",
    "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
    "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
    "                )\n",
    "        IS NULL\n",
    "        \n",
    "        AND (\n",
    "            SELECT t.track_id FROM track t\n",
    "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
    "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
    "            EXCEPT\n",
    "            \n",
    "            SELECT il2.track_id FROM invoice_line il2\n",
    "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
    "            )\n",
    "        \n",
    "        THEN \"yes\"\n",
    "        ELSE \"no\"\n",
    "        END AS album_purchase\n",
    "FROM a_track_per_invoice\n",
    "    )\n",
    "\n",
    "        \n",
    "SELECT album_purchase, \n",
    "       COUNT(invoice_id) n_invoices, \n",
    "       ROUND(CAST(COUNT(invoice_id) AS FLOAT) / (SELECT COUNT * FROM invoice), 3) percent_invoices\n",
    "FROM album_vs_individual\n",
    "GROUP BY album_purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>album_purchase</th>\n",
       "        <th>n_of_invoices</th>\n",
       "        <th>percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Album</td>\n",
       "        <td>500</td>\n",
       "        <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Individual_tracks</td>\n",
       "        <td>114</td>\n",
       "        <td>0.186</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Album', 500, 0.814), ('Individual_tracks', 114, 0.186)]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH a_track_per_invoice AS \n",
    "                (\n",
    "                SELECT invoice_id, MAX(track_id) track_id\n",
    "                FROM invoice_line il\n",
    "                GROUP BY invoice_id\n",
    "                ),\n",
    "    \n",
    "album_vs_individual AS\n",
    "    (\n",
    "    SELECT  a_track_per_invoice.*,\n",
    "        CASE \n",
    "           WHEN (\n",
    "                 SELECT il2.track_id FROM invoice_line il2\n",
    "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
    "    \n",
    "                 EXCEPT\n",
    "        \n",
    "                 SELECT t.track_id FROM track t\n",
    "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
    "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
    "                )\n",
    "        IS NULL\n",
    "        \n",
    "        AND (\n",
    "            SELECT t.track_id FROM track t\n",
    "                 WHERE t.album_id = (SELECT tr.album_id FROM track tr\n",
    "                                WHERE tr.track_id = a_track_per_invoice.track_id)\n",
    "            EXCEPT\n",
    "            \n",
    "            SELECT il2.track_id FROM invoice_line il2\n",
    "                 WHERE il2.invoice_id = a_track_per_invoice.invoice_id\n",
    "            )\n",
    "        \n",
    "        IS NULL\n",
    "        \n",
    "        THEN \"Individual_tracks\"\n",
    "        ELSE \"Album\"\n",
    "        END AS album_purchase\n",
    "FROM a_track_per_invoice\n",
    "    )\n",
    "\n",
    "SELECT album_purchase, \n",
    "       COUNT(invoice_id) n_of_invoices,\n",
    "       ROUND(CAST(COUNT(invoice_id) AS FLOAT) / (SELECT COUNT(*) FROM invoice), 3) percentage\n",
    "FROM album_vs_individual\n",
    "GROUP BY album_purchase"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Which artists are most used in most playlists?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "        <th>n_playlists</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Eugene Ormandy</td>\n",
       "        <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Academy of St. Martin in the Fields &amp; Sir Neville Marriner</td>\n",
       "        <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Berliner Philharmoniker &amp; Herbert Von Karajan</td>\n",
       "        <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>English Concert &amp; Trevor Pinnock</td>\n",
       "        <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>The King&#x27;s Singers</td>\n",
       "        <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Academy of St. Martin in the Fields, Sir Neville Marriner &amp; Thurston Dart</td>\n",
       "        <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Adrian Leaper &amp; Doreen de Feis</td>\n",
       "        <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Alberto Turco &amp; Nova Schola Gregoriana</td>\n",
       "        <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Antal Doráti &amp; London Symphony Orchestra</td>\n",
       "        <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Barry Wordsworth &amp; BBC Concert Orchestra</td>\n",
       "        <td>5</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Eugene Ormandy', 7),\n",
       " ('Academy of St. Martin in the Fields & Sir Neville Marriner', 6),\n",
       " ('Berliner Philharmoniker & Herbert Von Karajan', 6),\n",
       " ('English Concert & Trevor Pinnock', 6),\n",
       " (\"The King's Singers\", 6),\n",
       " ('Academy of St. Martin in the Fields, Sir Neville Marriner & Thurston Dart', 5),\n",
       " ('Adrian Leaper & Doreen de Feis', 5),\n",
       " ('Alberto Turco & Nova Schola Gregoriana', 5),\n",
       " ('Antal Doráti & London Symphony Orchestra', 5),\n",
       " ('Barry Wordsworth & BBC Concert Orchestra', 5)]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH new_table AS \n",
    "                (\n",
    "                 SELECT * \n",
    "                 FROM artist a\n",
    "                 LEFT JOIN album al ON al.artist_id = a.artist_id\n",
    "                 LEFT JOIN track t ON t.album_id = al.album_id\n",
    "                 LEFT JOIN playlist_track p ON p.track_id = t.track_id\n",
    "                )\n",
    "    \n",
    "SELECT name, COUNT(DISTINCT playlist_id) n_playlists\n",
    "FROM new_table\n",
    "GROUP BY 1 ORDER BY 2 DESC\n",
    "LIMIT 10;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How does the range of tracks in the store compare to their popularity?\n",
    "I define \"range\" as genre and \"popularity\" as tracks sold. I use and modify the code from line 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>genre</th>\n",
       "        <th>percentage_in_store</th>\n",
       "        <th>percentage_sold</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Rock</td>\n",
       "        <td>0.37</td>\n",
       "        <td>0.554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Latin</td>\n",
       "        <td>0.165</td>\n",
       "        <td>0.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Metal</td>\n",
       "        <td>0.107</td>\n",
       "        <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Alternative &amp; Punk</td>\n",
       "        <td>0.095</td>\n",
       "        <td>0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Jazz</td>\n",
       "        <td>0.037</td>\n",
       "        <td>0.025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>TV Shows</td>\n",
       "        <td>0.027</td>\n",
       "        <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Blues</td>\n",
       "        <td>0.023</td>\n",
       "        <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Classical</td>\n",
       "        <td>0.021</td>\n",
       "        <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Drama</td>\n",
       "        <td>0.018</td>\n",
       "        <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>R&amp;B/Soul</td>\n",
       "        <td>0.017</td>\n",
       "        <td>0.033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Reggae</td>\n",
       "        <td>0.017</td>\n",
       "        <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Pop</td>\n",
       "        <td>0.014</td>\n",
       "        <td>0.013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Soundtrack</td>\n",
       "        <td>0.012</td>\n",
       "        <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Alternative</td>\n",
       "        <td>0.011</td>\n",
       "        <td>0.025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Hip Hop/Rap</td>\n",
       "        <td>0.01</td>\n",
       "        <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Electronica/Dance</td>\n",
       "        <td>0.009</td>\n",
       "        <td>0.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Heavy Metal</td>\n",
       "        <td>0.008</td>\n",
       "        <td>0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Easy Listening</td>\n",
       "        <td>0.007</td>\n",
       "        <td>0.016</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Rock', 0.37, 0.554),\n",
       " ('Latin', 0.165, 0.035),\n",
       " ('Metal', 0.107, 0.13),\n",
       " ('Alternative & Punk', 0.095, 0.103),\n",
       " ('Jazz', 0.037, 0.025),\n",
       " ('TV Shows', 0.027, 0.0),\n",
       " ('Blues', 0.023, 0.026),\n",
       " ('Classical', 0.021, 0.01),\n",
       " ('Drama', 0.018, 0.0),\n",
       " ('R&B/Soul', 0.017, 0.033),\n",
       " ('Reggae', 0.017, 0.007),\n",
       " ('Pop', 0.014, 0.013),\n",
       " ('Soundtrack', 0.012, 0.001),\n",
       " ('Alternative', 0.011, 0.025),\n",
       " ('Hip Hop/Rap', 0.01, 0.007),\n",
       " ('Electronica/Dance', 0.009, 0.012),\n",
       " ('Heavy Metal', 0.008, 0.002),\n",
       " ('Easy Listening', 0.007, 0.016)]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "WITH tracks_sold AS\n",
    "                    (\n",
    "                    SELECT il.* \n",
    "                    FROM invoice_line il\n",
    "                    INNER JOIN invoice i ON il.invoice_id = i.invoice_id\n",
    "                    INNER JOIN customer c ON i.customer_id = c.customer_id\n",
    "                    ),\n",
    "    \n",
    "tracks_sold_by_genre AS \n",
    "                      (\n",
    "                      SELECT g.name genre, \n",
    "                      COUNT(ts.invoice_line_id) sold_by_genre,\n",
    "                      ROUND(CAST(COUNT(ts.invoice_line_id) AS FLOAT) / \n",
    "                      (\n",
    "                      SELECT COUNT(*) from tracks_sold\n",
    "                      ), 3) percentage_sold\n",
    "                      FROM tracks_sold ts\n",
    "                      INNER JOIN track t ON t.track_id = ts.track_id\n",
    "                      INNER JOIN genre g ON g.genre_id = t.genre_id\n",
    "                      GROUP BY 1 \n",
    "                      ORDER BY 2 DESC\n",
    "                      )\n",
    "\n",
    "SELECT g.name genre, \n",
    "       ROUND(CAST(COUNT(track_id) AS FLOAT) / (\n",
    "        SELECT COUNT(*) FROM track\n",
    "       ), 3) percentage_in_store,\n",
    "       percentage_sold \n",
    "FROM track t\n",
    "INNER JOIN genre g ON g.genre_id = t.genre_id\n",
    "INNER JOIN tracks_sold_by_genre tt ON tt.genre = g.name\n",
    "GROUP BY 1 ORDER BY 2 DESC;"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
